// Enhanced Howl Example - Showcasing VS Code Extension Features with Formatting
// This example demonstrates the enhanced debug.print functionality and formatter features

fn main() -> void {
    // Basic variable examples
    let name = "Howl Language";
    let version = "0.2.0";
    let year = 2024;
    let pi = 3.14159;
    let score = 95.789;
    let enabled = true;
    
    // Arrays - trailing comma controls formatting
    let short_list = [1, 2, 3];  // No trailing comma = compact
    
    let long_list = [  // Trailing comma = multi-line
        "first",
        "second", 
        "third",
        "fourth",
    ];
    
    // Enhanced std.debug.print with format specifiers
    // Try typing "std.debug.print" to see autocomplete with format documentation
    
    // Basic printing with anonymous struct formatting
    std.debug.print("Welcome to {s}!\n", .{name});
    
    // Multiple arguments - compact format
    std.debug.print("{s} v{s} - Released in {d}\n", .{name, version, year});
    
    // Multi-line anonymous struct with trailing comma
    std.debug.print("Detailed info: {s} v{s}, Year: {d}, Pi: {f:.4}\n", .{
        name,
        version, 
        year,
        pi,
    });
    
    // Float precision formatting - enhanced feature
    std.debug.print("Pi (default): {f}\n", .{pi});
    std.debug.print("Pi (2 decimal): {f:.2}\n", .{pi});
    std.debug.print("Score (1 decimal): {f:.1}\n", .{score});
    
    // Struct literals - trailing comma controls format
    let simple_point = Point { x: 10, y: 20 };
    
    let complex_config = Config {
        host: "localhost",
        port: 8080,
        timeout_ms: 5000,
        max_connections: 100,
        enable_logging: true,
    };
    
    if enabled {
        std.debug.print("Feature enabled!\n", .{});
    }
    
    // Loop with enhanced debug output
    for i in 1..4 {
        std.debug.print("Loop iteration {d}: value squared = {d}\n", .{i, i * i});
    }
}

// Function with parameters - trailing comma = multi-line format
fn create_user(
    name: string,
    email: string, 
    age: u32,
    score: f64,
    active: bool,
) -> User {
    return User {
        name: name,
        email: email,
        age: age,
        score: score,
        active: active,
    };
}

// Simple function without trailing comma - compact format
fn add(a: i32, b: i32) -> i32 {
    return a + b;
}

// Struct definitions with trailing comma formatting
struct Point {
    x: i32,
    y: i32,
}

struct Config {
    host: string,
    port: u32,
    timeout_ms: u32,
    max_connections: u32,
    enable_logging: bool,
}

struct User {
    name: string,
    email: string,
    age: u32,
    score: f64,
    active: bool,
}

// This example showcases:
// 1. Enhanced std.debug.print with format specifiers  
// 2. Intelligent formatting with trailing comma support
// 3. Anonymous struct formatting (.{arg1, arg2, ...})
// 4. Precision formatting ({f:.2}, {f:.1})  
// 5. Multi-line vs compact formatting based on trailing commas
// 6. Function parameter formatting
// 7. Struct literal formatting
// 8. Standard library autocomplete (std.debug, std.math, etc.)
//
// Try the VS Code extension features:
// - Format Document: Ctrl+Shift+I (Cmd+Shift+I on macOS) 
// - Format Selection: Ctrl+K Ctrl+F (Cmd+K Cmd+F on macOS)
// - Add trailing commas to see multi-line formatting
// - Remove trailing commas to see compact formatting
// - Type "std." to see module completions
// - Type "std.debug.print" for enhanced format help
// - Use Command Palette → "Howl: Build Current File"
// - Use Command Palette → "Howl: Run Current File"