// std/debug module - Debugging utilities using compile-time code generation

// Enhanced debug print function - supports format specifiers and anonymous struct arguments
// Usage: std.debug.print("{d:.2} {s:!>4}", .{3.141, "hi!"})
 print :: fn (format: string, args: AnyType)  void {
    match @compile.target {
    |    .c => @compile.insert("/* Enhanced C debug print */"),
    |    .javascript => @compile.insert("/* Enhanced JS debug print */")
    }
}

// Legacy single-value print functions for backward compatibility
 printInt :: fn (format: string, value: i32)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(format, value);"),
    |    .javascript => @compile.insert("console.log(format.replace('{}', value));")
    }
}

// Float version of debug print (legacy)
 printFloat :: fn (format: string, value: f32)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(format, value);"),
    |    .javascript => @compile.insert("console.log(format.replace('{}', value));")
    }
}

// String version of debug print (legacy) 
 printString :: fn (format: string, value: string)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(format, value);"),
    |    .javascript => @compile.insert("console.log(format.replace('{}', value));")
    }
}

// Simple message print
 println :: fn (message: string)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(\"%s\\n\", message);"),
    |    .javascript => @compile.insert("console.log(message);")
    }
}

// Assert function - panic if condition is false
 assert :: fn (condition: bool, message: string)  void {
    match @compile.target {
    |    .c => @compile.insert(
            "if (!condition) {\n" ++
            "    fprintf(stderr, \"Assertion failed: %s\\n\", message);\n" ++
            "    exit(1);\n" ++
            "}"
        ),
    |    .javascript => @compile.insert(
            "if (!condition) {\n" ++
            "    throw new Error(`Assertion failed: ${message}`);\n" ++
            "}"
        )
    }
}

// Print debug information about an integer value
 dump :: fn (value: i32)  void {
    match @compile.target {
    |   .c => @compile.insert("printf(\"Debug dump: %d\\n\", value);"),
    |   .javascript => @compile.insert("console.log('Debug dump:', value);")
    }
}

// Debugging breakpoint
 breakpoint :: fn ()  void {
    match @compile.target {
    |   .c => @compile.insert("__builtin_debugtrap();"),
    |    .javascript => @compile.insert("debugger;")
    }
}