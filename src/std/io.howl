// Standard I/O Library for Howl
// Cross-platform I/O operations using compile-time code generation

// Basic output functions
 print :: fn (text: string)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(\"%s\", text);"),
    |   .javascript => @compile.insert("process.stdout.write(text);")
    }
}

 println :: fn (text: string)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(\"%s\\n\", text);"),
    |   .javascript => @compile.insert("console.log(text);")
    }
}

// Formatted output using smart printf conversion
 printf :: fn (format: string, value: i32)  void {
    match @compile.target {
    |    .c => @compile.insert("printf(format, value);"),
    |    .javascript => @compile.insert("console.log(format.replace('{}', value));")
    }
}

 printfFloat :: fn (format: string, value: f32)  void {
    match @compile.target {
    |   .c => @compile.insert("printf(format, value);"),
    |    .javascript => @compile.insert("console.log(format.replace('{}', value));")
    }
}

// Error output
 error :: fn (message: string)  void {
    match @compile.target {
    |    .c => @compile.insert("fprintf(stderr, \"Error: %s\\n\", message);"),
    |    .javascript => @compile.insert("console.error('Error:', message);")
    }
}

 warning :: fn (message: string)  void {
    match @compile.target {
    |    .c => @compile.insert("fprintf(stderr, \"Warning: %s\\n\", message);"),
    |    .javascript => @compile.insert("console.warn('Warning:', message);")
    }
}