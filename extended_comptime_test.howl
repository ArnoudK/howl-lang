// Test file for extended compile-time features

// Define a test struct
Person :: struct {
    name: string,
    age: i32,
    email: string,
}

// Test @fieldCount built-in
getFieldCount :: comp fn () i32 {
    return @fieldCount(Person)
}

// Test @hasField built-in  
hasNameField :: comp fn () bool {
    return @hasField(Person, "name")
}

hasUnknownField :: comp fn () bool {
    return @hasField(Person, "unknown")
}

// Test @fieldNames built-in
getFieldNames :: comp fn () void {
    names := @fieldNames(Person)
    // Return void for now since the return type needs checking
}

// Test @fieldInfo built-in (existing functionality)
getFieldInfo :: comp fn () void {
    info := @fieldInfo(Person, "name")
    // Return void for now since the return type is complex
}

// Test using compile-time functions
main :: fn () void {
    // These should all be evaluated at compile-time
    field_count := getFieldCount()
    has_name := hasNameField()
    has_unknown := hasUnknownField()
    // field_names := getFieldNames()
    
    // Regular runtime code would continue here...
    std.debug.print("Compile-time tests passed!\n")
}