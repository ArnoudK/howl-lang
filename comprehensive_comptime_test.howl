// Comprehensive test of extended compile-time features in Howl

// Define test structs with different field counts
Person :: struct {
    name: string,
    age: i32,
    email: string,
}

Point :: struct {
    x: f32,
    y: f32,
}

Empty :: struct {
    // No fields
}

// Test all the new built-ins with compile-time functions

// @fieldCount tests
personFieldCount :: comp fn () i32 {
    return @fieldCount(Person)  // Should be 3
}

pointFieldCount :: comp fn () i32 {
    return @fieldCount(Point)   // Should be 2
}

emptyFieldCount :: comp fn () i32 {
    return @fieldCount(Empty)   // Should be 0
}

// @hasField tests
personHasName :: comp fn () bool {
    return @hasField(Person, "name")   // Should be true
}

personHasWeight :: comp fn () bool {
    return @hasField(Person, "weight") // Should be false
}

pointHasX :: comp fn () bool {
    return @hasField(Point, "x")       // Should be true
}

pointHasZ :: comp fn () bool {
    return @hasField(Point, "z")       // Should be false
}

// @fieldNames tests
personFieldNames :: comp fn () void {
    names := @fieldNames(Person)  // Should return ["name", "age", "email"]
    // Use names for compile-time processing
}

pointFieldNames :: comp fn () void {
    names := @fieldNames(Point)   // Should return ["x", "y"] 
    // Use names for compile-time processing
}

// @fieldInfo tests (existing feature)
personNameInfo :: comp fn () void {
    info := @fieldInfo(Person, "name")  // Should return FieldInfo struct
    // Use info for compile-time processing
}

pointXInfo :: comp fn () void {
    info := @fieldInfo(Point, "x")      // Should return FieldInfo struct
    // Use info for compile-time processing
}

// Runtime function that demonstrates everything works together
main :: fn () void {
    // All of these compile-time function calls should be evaluated during compilation
    // and not generate any runtime C code
    
    personFields := personFieldCount()   // Evaluated at compile-time -> 3
    pointFields := pointFieldCount()     // Evaluated at compile-time -> 2
    emptyFields := emptyFieldCount()     // Evaluated at compile-time -> 0
    
    hasName := personHasName()           // Evaluated at compile-time -> true
    hasWeight := personHasWeight()       // Evaluated at compile-time -> false
    
    hasX := pointHasX()                  // Evaluated at compile-time -> true
    hasZ := pointHasZ()                  // Evaluated at compile-time -> false
    
    // Call compile-time functions that use other built-ins
    personFieldNames()                   // Processes field names at compile-time
    pointFieldNames()                    // Processes field names at compile-time
    personNameInfo()                     // Gets field info at compile-time
    pointXInfo()                         // Gets field info at compile-time
    
    // This is the only code that should appear in the generated C
    std.debug.print("All compile-time features work correctly!\n")
    std.debug.print("The compile-time functions were evaluated during compilation.\n")
}