// Standard Math Library for Howl
// Cross-platform mathematical operations using compile-time code generation

// Basic arithmetic functions
abs :: fn (x: i32)  i32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return abs(x);")}
    |   .javascript => {
     @compile.insert("return Math.abs(x);")}
    }
}

 fabs :: fn (x: f32)  f32 {
    match @compile.target {
    |   .c => {
     @compile.insert("return fabsf(x);")}
    |    .javascript => {
     @compile.insert("return Math.abs(x);")}
    }
}

// Power and root functions
 pow :: fn (base: f32, exp: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return powf(base, exp);")}
    |    .javascript => {
     @compile.insert("return Math.pow(base, exp);")}
    }
}

 sqrt :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return sqrtf(x);")}
    |    .javascript => {
     @compile.insert("return Math.sqrt(x);")}
    }
}

// Trigonometric functions
 sin :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return sinf(x);")}
    |    .javascript => {
     @compile.insert("return Math.sin(x);")}
    }
}

 cos :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return cosf(x);")}
    |    .javascript => {
     @compile.insert("return Math.cos(x);")}
    }
}

 tan :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return tanf(x);")}
    |    .javascript => {
     @compile.insert("return Math.tan(x);")}
    }
}

// Rounding functions
 floor :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return floorf(x);")}
    |    .javascript => {
     @compile.insert("return Math.floor(x);")}
    }
}

 ceil :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return ceilf(x);")}
    |    .javascript => {
     @compile.insert("return Math.ceil(x);")}
    }
}

 round :: fn (x: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return roundf(x);")}
    |    .javascript => {
     @compile.insert("return Math.round(x);")}
    }
}

// Min/Max functions
 min :: fn (a: f32, b: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return fminf(a, b);")}
    |    .javascript => {
     @compile.insert("return Math.min(a, b);")}
    }
}

 max :: fn (a: f32, b: f32)  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return fmaxf(a, b);")}
    |    .javascript => {
     @compile.insert("return Math.max(a, b);")}
    }
}

// Random numbers
 random :: fn ()  f32 {
    match @compile.target {
    |    .c => {
     @compile.insert("return (float)rand() / RAND_MAX;")}
    |    .javascript => {
     @compile.insert("return Math.random();")}
    }
}
/// Pi (64 bit float)
pi64 : f64 = 3.14159265358979323846
/// Pi (32 bit float)
pi32 : f32 = 3.14159265358979323846

/// Euler's number (32 bit float)
e32 : f32 = 2.718281828459045235
/// Euler's number (64 bit float)
e64 : f64 = 2.7182818284590452353
