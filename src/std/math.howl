// Standard Math Library for Howl
// Cross-platform mathematical operations using compile-time code generation

// Basic arithmetic functions
extern fn abs(x: i32) -> i32 {
    match @compile.target {
        .c => @compile.insert("return abs(x);"),
        .javascript => @compile.insert("return Math.abs(x);")
    }
}

extern fn fabs(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return fabsf(x);"),
        .javascript => @compile.insert("return Math.abs(x);")
    }
}

// Power and root functions
extern fn pow(base: f32, exp: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return powf(base, exp);"),
        .javascript => @compile.insert("return Math.pow(base, exp);")
    }
}

extern fn sqrt(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return sqrtf(x);"),
        .javascript => @compile.insert("return Math.sqrt(x);")
    }
}

// Trigonometric functions
extern fn sin(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return sinf(x);"),
        .javascript => @compile.insert("return Math.sin(x);")
    }
}

extern fn cos(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return cosf(x);"),
        .javascript => @compile.insert("return Math.cos(x);")
    }
}

extern fn tan(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return tanf(x);"),
        .javascript => @compile.insert("return Math.tan(x);")
    }
}

// Rounding functions
extern fn floor(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return floorf(x);"),
        .javascript => @compile.insert("return Math.floor(x);")
    }
}

extern fn ceil(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return ceilf(x);"),
        .javascript => @compile.insert("return Math.ceil(x);")
    }
}

extern fn round(x: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return roundf(x);"),
        .javascript => @compile.insert("return Math.round(x);")
    }
}

// Min/Max functions
extern fn min(a: f32, b: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return fminf(a, b);"),
        .javascript => @compile.insert("return Math.min(a, b);")
    }
}

extern fn max(a: f32, b: f32) -> f32 {
    match @compile.target {
        .c => @compile.insert("return fmaxf(a, b);"),
        .javascript => @compile.insert("return Math.max(a, b);")
    }
}

// Random numbers
extern fn random() -> f32 {
    match @compile.target {
        .c => @compile.insert("return (float)rand() / RAND_MAX;"),
        .javascript => @compile.insert("return Math.random();")
    }
}

// Mathematical constants as functions
extern fn pi() -> f32 {
    match @compile.target {
        .c => @compile.insert("return 3.14159265358979323846f;"),
        .javascript => @compile.insert("return Math.PI;")
    }
}

extern fn e() -> f32 {
    match @compile.target {
        .c => @compile.insert("return 2.71828182845904523536f;"),
        .javascript => @compile.insert("return Math.E;")
    }
}